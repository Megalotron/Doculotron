"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[694],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(a),d=r,g=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return a?n.createElement(g,i(i({ref:t},c),{},{components:a})):n.createElement(g,i({ref:t},c))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},3945:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:1},i="Image process",l={unversionedId:"devops/image_process",id:"devops/image_process",title:"Image process",description:"Explains how Megalotron images' are built and used in production.",source:"@site/docs/devops/image_process.md",sourceDirName:"devops",slug:"/devops/image_process",permalink:"/Doculotron/docs/devops/image_process",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/devops/image_process.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"DevOps",permalink:"/Doculotron/docs/category/devops"}},s={},p=[{value:"GitHub Registry",id:"github-registry",level:2},{value:"Process",id:"process",level:2},{value:"Image convention",id:"image-convention",level:2},{value:"Image name by stack",id:"image-name-by-stack",level:2},{value:"Guide",id:"guide",level:2},{value:"Manually push an image to GitHub registry",id:"manually-push-an-image-to-github-registry",level:3}],c={toc:p};function m(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"image-process"},"Image process"),(0,r.kt)("p",null,"Explains how Megalotron images' are built and used in production."),(0,r.kt)("h2",{id:"github-registry"},"GitHub Registry"),(0,r.kt)("p",null,"Megalotron use its ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/orgs/Megalotron/packages"},"organisation's registry")," to host Docker Image."),(0,r.kt)("p",null,"We could use other solution like ",(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com"},"Docker Hub")," or ",(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com"},"ECR")," but\nit is more convenient to reduce the number of services used."),(0,r.kt)("h2",{id:"process"},"Process"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"gh registry process schema",src:a(9724).Z,width:"2073",height:"932"})),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Each repository has credentials to push to Megalotron GitHub repository."),(0,r.kt)("p",{parentName:"admonition"},"Password is stored as a secret named ",(0,r.kt)("inlineCode",{parentName:"p"},"REGISTRY_TOKEN")," and the username is\nstored as ",(0,r.kt)("inlineCode",{parentName:"p"},"REGISTRY_USERNAME"),".")),(0,r.kt)("h2",{id:"image-convention"},"Image convention"),(0,r.kt)("p",null,"Megalotron has multiple stack, to simplify its management, there's a semantic convention to follow."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"An image shall be named following the convention")," ",(0,r.kt)("inlineCode",{parentName:"li"},"megalotron/<stack>:<tag>"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Tag shall follow the ",(0,r.kt)("a",{parentName:"strong",href:"https://semver.org"},"official semantic versioning")),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"New release shall have a newer version than the previous one"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"v1.0.0")," -> ",(0,r.kt)("inlineCode",{parentName:"li"},"v1.0.1"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Production and develop version shall respectively be named ",(0,r.kt)("inlineCode",{parentName:"strong"},"main")," and ",(0,r.kt)("inlineCode",{parentName:"strong"},"dev")),".")),(0,r.kt)("h2",{id:"image-name-by-stack"},"Image name by stack"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Stack"),(0,r.kt)("th",{parentName:"tr",align:null},"Tag"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Megalotron/Polo-Dashboard"},"Dashboard")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"megalotron/dashboard"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Megalotron/Polo-Backend"},"Backend")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"megalotron/backend"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Megalotron/Sniffer"},"Sniffer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"megalotron/sniffer"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Megalotron/go-flowmeter"},"Go FlowMeter")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"megalotron/go-flow-meter"))))),(0,r.kt)("h2",{id:"guide"},"Guide"),(0,r.kt)("h3",{id:"manually-push-an-image-to-github-registry"},"Manually push an image to GitHub registry"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"You need to generate a ",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token"},"Personal Access Token"),"\non GitHub so your Docker Engine can authenticate to the GitHub registry."),(0,r.kt)("p",{parentName:"admonition"},"Of course, you also need a running ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Docker engine")," on your host.")),(0,r.kt)("p",null,"Let's use as example the ",(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/alpine"},"alpine")," docker image that we will push to the GitHub registry."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Pull the image in your local Docker engine.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'# Pull image\ndocker pull alpine\n\n# Check if the image exist locally\ndocker image inspect alpine\n#\n# [\n#    {\n#        "Id": "sha256:04eeaa5f8c35b8206a15c12425498c37ecd2181e0ef202bea24a2382e4dd240f",\n#...\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You can use any image loaded in your local Docker engine. This may have been built by a Dockerfile\nor pulled from another registry.")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Tag the Alpine image to target the GitHub registry")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"docker tag alpine ghcr.io/megalotron/alpine:test\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Login to the GitHub registry")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# Export your PAT into environment\nexport GHCR_PAT=<your generated personnal access token>\n\n# Login to GitHub registry\necho $GHCR_PAT | docker login ghcr.io -u <your GH username> --password-stdin\n")),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Push image to GitHub Registry")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"docker push ghcr.io/megalotron/alpine:test \n")))}m.isMDXComponent=!0},9724:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/megalotron_image_management_process-a8adb61f65389b0432124f8d247c23e5.png"}}]);